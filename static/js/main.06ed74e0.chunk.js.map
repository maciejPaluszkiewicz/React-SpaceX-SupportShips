{"version":3,"sources":["images/spaceXlogo.png","components/spaceHeader.jsx","components/shipList.jsx","components/singleShip.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","spaceHeader","react_default","a","createElement","className","src","logo","alt","shipList","props","currentIndex","prevId","nextId","currentShipId","findIndex","ship","ship_id","length","onKeyDown","event","stopPropagation","key","onShipClick","tabIndex","map","onClick","ship_name","singleShip","image","ship_type","url","href","ship_model","roles","join","active","imo","mmsi","abs","class","weight_lbs","weight_kg","year_built","home_port","status","speed_kn","course_deg","position","latitude","longitude","successful_landings","attempted_landings","missions","slice","mission","name","flight","apiData","App","state","ships","showShips","handleShipDetailsDisplay","fetch","concat","then","results","json","data","_this","setState","_this2","this","_this$state","src_components_spaceHeader","src_components_shipList","src_components_singleShip","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06ed74e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spaceXlogo.699b7f5a.png\";","import React from \"react\";\nimport \"./spaceHeader.css\";\nimport logo from \"../images/spaceXlogo.png\";\n\nconst spaceHeader = () => (\n  <div className=\"headerWithLogo\">\n    <img src={logo} alt=\"SpaceX-logo\" />\n    <h1 className=\"spaceHeader\">SpaceX Support Ships</h1>\n  </div>\n);\n\nexport default spaceHeader;\n","import React from \"react\";\nimport \"./shipList.css\";\nconst ARROW_UP = \"ArrowUp\";\nconst ARROW_DOWN = \"ArrowDown\";\n\nconst shipList = props => {\n  let currentIndex;\n  let prevId;\n  let nextId;\n  if (props.currentShipId) {\n    currentIndex = props.shipList.findIndex(\n      ship => ship.ship_id === props.currentShipId\n    );\n    prevId =\n      currentIndex !== 0\n        ? props.shipList[currentIndex - 1].ship_id\n        : props.shipList[props.shipList.length - 1].ship_id;\n    nextId = props.shipList[(currentIndex + 1) % props.shipList.length].ship_id; //todo\n    // currentIndex !== props.shipList.length - 1\n    //   ? props.shipList[currentIndex + 1].ship_id\n    //   : props.shipList[0].ship_id;\n  }\n\n  const handleKeyDown = event => {\n    event.stopPropagation();\n    if (event.key === ARROW_DOWN) {\n      props.onShipClick(nextId);\n    }\n    if (event.key === ARROW_UP) {\n      props.onShipClick(prevId);\n    }\n  };\n  //  function(){\n  //        return(\n  //            <div>\n  //              <input type=\"text\" id=\"one\" onKeyPress={this.handleKeyPress} />\n  //           </div>\n  //        );\n  //   }\n\n  return (\n    <ul className=\"shipList\" onKeyDown={handleKeyDown} tabIndex=\"0\">\n      {props.shipList.map(ship => {\n        return (\n          <li\n            className={\n              ship.ship_id === props.currentShipId ? \"currentShipOnList\" : \"\"\n            }\n            onClick={() => props.onShipClick(ship.ship_id)}\n          >\n            {ship.ship_name}\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default shipList;\n","import React from \"react\";\nimport \"./singleShip.css\";\n\nconst placeHolder =\n  \"https://via.placeholder.com/400x300.png/888888/000000/?text=No+Image+Available\";\n\nconst singleShip = props => (\n  <div className=\"singleShip\">\n    <div>\n      <img\n        src={props.singleShip.image ? props.singleShip.image : placeHolder}\n        alt={props.singleShip.ship_name}\n      />\n    </div>\n\n    <div className=\"shipTitle\">\n      <h1>{props.singleShip.ship_name}</h1>\n      <h2>{props.singleShip.ship_type}</h2>\n      {props.singleShip.url ? <a href={props.singleShip.url}>LINK</a> : \"\"}\n    </div>\n\n    <div className=\"mainShipData\">\n      <ul>\n        <li>\n          <label>Model:</label>\n          {props.singleShip.ship_model}\n        </li>\n        <li>\n          <label>Roles:</label>\n          {props.singleShip.roles.join(\", \")}\n        </li>\n        <li>\n          <label>Status:</label>{\" \"}\n          {props.singleShip.active ? \"ACTIVE\" : \"INACTIVE\"}\n        </li>\n        <li>\n          <label>IMO: </label>\n          {props.singleShip.imo}\n        </li>\n        <li>\n          <label>MMSI:</label>\n          {props.singleShip.mmsi}\n        </li>\n        <li>\n          <label>ABS:</label>\n          {props.singleShip.abs}\n        </li>\n        <li>\n          <label>Class:</label>\n          {props.singleShip.class}\n        </li>\n        <li>\n          <label>Weight in lbs:</label> {props.singleShip.weight_lbs}\n        </li>\n        <li>\n          <label>Weight in kgs:</label>\n          {props.singleShip.weight_kg}\n        </li>\n        <li>\n          <label>Year built:</label>\n          {props.singleShip.year_built}\n        </li>\n        <li>\n          <label>Home Port:</label>\n          {props.singleShip.home_port}\n        </li>\n      </ul>\n      <ul>\n        <li>\n          <label>Current status:</label>\n          {props.singleShip.status}\n        </li>\n        <li>\n          <label>Speed:</label>\n          {props.singleShip.speed_kn}\n        </li>\n        <li>\n          <label>Course:</label>\n          {props.singleShip.course_deg}\n        </li>\n        <li>\n          <label>Latitude/Longtitude:</label>\n          {props.singleShip.position.latitude} /{\" \"}\n          {props.singleShip.position.longitude}\n        </li>\n      </ul>\n      <ul>\n        <li>\n          <label>Successful landings:</label>{\" \"}\n          {props.singleShip.successful_landings}\n        </li>\n        <li>\n          <label>Attempted landings:</label>{\" \"}\n          {props.singleShip.attempted_landings}\n        </li>\n      </ul>\n    </div>\n\n    <div className=\"shipMissions\">\n      <h2>Missions</h2>\n      <ul>\n        {props.singleShip.missions.slice(0, 15).map(mission => (\n          <li key={mission.name}>\n            <label>Name:</label> {mission.name} | <label>Flight:</label>{\" \"}\n            {mission.flight}\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nexport default singleShip;\n\n/*\nship_id: \"AMERICANLOSER\",\n  ship_name: \"American Loser\",\n  ship_model: null,\n  ship_type: \"Tug\",\n  roles: [\"Buffer Ship\", \"Frigate Tug\"],\n  active: false,\n  imo: 7434016666,\n  mmsi: 367020820666,\n  abs: 571252666,\n  class: 7604342666,\n  weight_lbs: 588000666,\n  weight_kg: 266712666,\n  year_built: 197666,\n  home_port: \"Port of Los Deviles\",\n  status: \"Stopped\",\n  speed_kn: 0,\n  course_deg: null,\n  position: {\n    latitude: 30.52731,\n    longitude: -88.10171\n  },\n  successful_landings: null,\n  attempted_landings: null,\n  missions: [\n    {\n      name: \"COTS 1\",\n      flight: 7\n    },\n    {\n      name: \"COTS 2\",\n      flight: 8\n    }\n  ],\n  url:\n    \"https://www.marinetraffic.com/en/ais/details/ships/shipid:434663/vessel:AMERICAN%20CHAMPION\",\n  image: \"https://i.imgur.com/woCxpkj.jpg\"\n};\n*/\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SpaceHeader from \"./components/spaceHeader\";\nimport ShipList from \"./components/shipList\";\nimport SingleShip from \"./components/singleShip\";\n\nconst apiData = \"https://api.spacexdata.com/v3/ships/\";\n\nclass App extends Component {\n  state = {\n    ships: null,\n    showShips: true,\n    singleShip: null\n  };\n  // dopracowac template func do fetchów.\n  handleShipDetailsDisplay = ship_id => {\n    fetch(`${apiData}${ship_id}`)\n      .then(results => results.json())\n      .then(data =>\n        this.setState({\n          singleShip: data\n        })\n      );\n  };\n\n  componentDidMount() {\n    fetch(`${apiData}`)\n      .then(results => results.json())\n      .then(data =>\n        this.setState({\n          ships: data\n        })\n      );\n  }\n\n  render() {\n    // /destructuring doczytaj\n    const { ships, singleShip } = this.state;\n    // const { ship_id } = singleShip;\n    return (\n      <div className=\"App\">\n        <SpaceHeader />\n        <div className=\"shipInfo\">\n          {ships ? (\n            <ShipList\n              currentShipId={singleShip ? singleShip.ship_id : null}\n              shipList={ships}\n              onShipClick={this.handleShipDetailsDisplay}\n            />\n          ) : (\n            \"\"\n          )}\n          {singleShip ? <SingleShip singleShip={singleShip} /> : \"\"}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}